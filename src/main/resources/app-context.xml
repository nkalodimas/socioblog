<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	    http://www.springframework.org/schema/mvc
	    http://www.springframework.org/schema/mvc/spring-mvc.xsd
	    http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/data/jpa
			http://www.springframework.org/schema/data/jpa/spring-jpa-1.1.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<context:component-scan base-package="gr.uoa.di.scan.**" />

	<jpa:repositories base-package="gr.uoa.di.scan.thesis.repository"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />

	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="gr.uoa.di.scan.thesis.AtmosphereArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<bean id="gson" class="com.google.gson.Gson" />

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

		<property name="locations">
			<list>
				<value>classpath:database.properties</value>
				<value>classpath:facebook.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>

	<bean class="java.net.URI" id="dbUrl">
    <constructor-arg value="#{systemEnvironment['DATABASE_URL']}"/>
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }"/>
    <property name="username" value="#{ @dbUrl.getUserInfo().split(':')[0] }"/>
    <property name="password" value="#{ @dbUrl.getUserInfo().split(':')[1] }"/>
		<!-- <property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" /> -->
	</bean>

	<bean id="persistenceUnitManager"
		class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
		<property name="persistenceXmlLocations">
			<list>
				<value>classpath*:META-INF/persistence.xml</value>
			</list>
		</property>
		<property name="defaultDataSource" ref="dataSource" />
	</bean>
	
	<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
	    <property name="connectionFactories">
	        <list>
	            <bean class="org.springframework.social.facebook.connect.FacebookConnectionFactory">
	                <constructor-arg value="${facebook.appKey}" />
	                <constructor-arg value="${facebook.appSecret}" />				
	            </bean>
	        </list>
	    </property>
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitManager" ref="persistenceUnitManager" />
		<property name="persistenceUnitName" value="thesis" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="mapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles" >
			<list>
					<value>dozer-bean-mappings.xml</value>
			</list>
		</property>
	</bean>

	<bean id="tokenService" class="org.springframework.security.core.token.KeyBasedPersistenceTokenService">
		<property name="secureRandom">
    	<bean class="java.security.SecureRandom" />
    </property>
    <property name="serverSecret" value="1234567" />
    <property name="serverInteger" value="12345678" />
    <property name="pseudoRandomNumberBits" value="7" />
	</bean>

	<security:http realm="Protected API" use-expressions="true" auto-config="false" create-session="stateless" entry-point-ref="restAuthenticationEntryPoint" >
		<security:custom-filter ref="authenticationTokenProcessingFilter" position="FORM_LOGIN_FILTER" />
	</security:http>

	<bean class="gr.uoa.di.scan.thesis.security.AuthenticationTokenProcessingFilter"
	    id="authenticationTokenProcessingFilter">
	    <constructor-arg ref="authenticationManager" />
	</bean>

	<security:authentication-manager alias="authenticationManager" erase-credentials="false">
    <security:authentication-provider ref="customAuthenticationProvider"/>
	</security:authentication-manager>

	 <security:global-method-security pre-post-annotations="enabled" />
	<tx:annotation-driven />

    <task:executor id="executor" pool-size="5"/>
    <task:scheduler id="scheduler" pool-size="5"/>
    <task:annotation-driven scheduler="scheduler" executor="executor"/>


</beans>
